## Try this: http://packages.debian.org/unstable/admin/molly-guard
# This script creates a fancy promt for bash.


__git_ps1() {
	# Do nothing, so no error will occur on systems without git
	true
}


commpilePromt() {
	# Calculate the remaining space, considering the length of invisible color
	# codes passed as first argument
	let pRemainingSpace=$COLUMNS-${#pLeftPart}-${#pRightPart}+${1}
	
	if [ "${1}" = "0" -o "${pRemainingSpace}" -ge "0" ]
	then
		# If we have enough space left, fill it and return successfully
		pFill="$(perl -e "print('─'x${pRemainingSpace});")"
		
		# Define the "normal" promt
		PS1="${pNotice}${pLeftPart}${pFill}${pRightPart}
${pLineC}└─${pPromtC}>>${pNormalC} "
		return 0
	else
		# If we haven't enough space left, return unsuccessfully
		return 1
	fi
}


precmd() {
	## ==== Create a notice if last command failed
	## This has to stay at the top, to get the right return value
	local returncode=$?
	
	## Workaround: We need a character after the "\n" to be recognized by PS1,
	## therefore we take the color code of the next line as our last bit.
	if [ "${returncode}" = "0" ]
	then
		pNotice="${pLineC}"
	else
		pNotice="${pFailedNoticeC}The last command FAILED with the exit code ${returncode}
${pLineC}"
	fi
	
	
	## ==== Define Variables
	## Creates in zsh a "%%" instead of "%", which messes with the line length
	## calculation (until now ignored)
	local git="$(__git_ps1 " (%s)")"
	local pwd="$(echo "${PWD/#$HOME/~}" | sed  's/.*\/\(.*\/.*\/.*\)$/\1/')"
	local time="$(date +%T)"
	
	
	
	
	## ==== Set title if terminal is xterm
	case "$TERM" in
		xterm*|rxvt*)
			echo -ne "\033]0;${S_HOST}: ${pwd} (${USER})\007"
		;;
	esac
	
	
	## ==== Try if the promt is long enough. otherwise short it
	## -- 1. try: full promt
	## replaces $HOME dir with ~ ; dir level 3	
	pLeftPart="${pLineC}┌───────┤${pHostC} ${S_HOST} ${pLineC}├───────┤${pPwdC} ${pwd}${git} ${pLineC}├"
	pRightPart="───────┤${pTimeC} ${time} ${pLineC}├────"
	commpilePromt 77 && return 0
	
	## -- 2. try: no clock
	pRightPart=""
	commpilePromt 27 && return 0
	
	## -- 3. try: only hostname
	pLeftPart="${pLineC}┌───────┤${pHostC} ${S_HOST} ${pLineC}├───────┤${pPwdC} ${pwd}${git} ${pLineC}├"
	commpilePromt 55 && return 0
	
	## -- 4. try: no git
	git=0
	pLeftPart="${pLineC}┌───────┤${pPwdC} ${pwd} ${pLineC}├"
	commpilePromt 33 && return 0
	
	## -- 5. try: only pwd
	pLeftPart="${pLineC}┌───────┤${pPwdC} ${pwd} ${pLineC}├"
	commpilePromt 33 && return 0
	
	## -- 7. try: fall back, no graphical gimmicks
	pLeftPart="${pPwdC}${pwd}"
	pFill=""
	commpilePromt 0
	
	history -a
	history -n
}


prepareGit() {
	for f in \
		"/usr/share/git/git-prompt.sh" \
		"/usr/lib/git-core/git-sh-prompt"
	do
		if [ -f "$f" ] ; then
			source "$f"
			GIT_PS1_SHOWDIRTYSTATE=yep
			GIT_PS1_SHOWSTASHSTATE=yep
			GIT_PS1_SHOWUNTRACKEDFILES=yep
			break
		fi
	done
	
	gitCompleteFile="/usr/share/git/completion/git-completion.$S_ACT_SHELL"
	test -f "$gitCompleteFile"
	return "$?"
}


case "$S_ACT_SHELL" in
	"bash")
		if prepareGit ; then
			source "$gitCompleteFile"
		fi
		
		npStart="\["
		npEnd="\]"
		;;
	
	"zsh")
		if prepareGit ; then
			fpath+="$gitCompleteFile"
		fi
		
		npStart="%{"
		npEnd="%}"
		;;
	
	*)
		## Harmless replacement for "non-printing" escape sequencees to maintain
		## the correct length
		npStart="\001\002"
		npEnd="\001\002"
		;;
esac


## ==== colors
## -- define
pNormalC=$(echo -e "$npStart\033[m$npEnd")
pLineC=$(  echo -e "$npStart\033[0;36m$npEnd")
pRootC=$(  echo -e "$npStart\033[1;31m$npEnd")
pRemoteC=$(echo -e "$npStart\033[1;35m$npEnd")
pUserC=$(  echo -e "$npStart\033[1;32m$npEnd")
pTextC=$(  echo -e "$npStart\033[1;33m$npEnd")
pHostLocalC=$pTextC
pHostRemoteC=$pRemoteC
pPwdC=$pTextC
pTimeC=$pTextC
pFailedNoticeC=$(echo -e "$npStart\033[1;31m$npEnd")

## -- select depending on user
if [ "$UID" -eq 0 ] ; then
	pPromtC="${pRootC}"
else
	pPromtC="${pUserC}"
fi

## -- select depending on location
if [ -n "$SSH_CONNECTION" ] ; then
	pHostC=${pHostRemoteC}
else
	pHostC=${pHostLocalC}
fi


## ==== The rest of definitions
## This function will be called before PS1 is evaluated
PROMPT_COMMAND=precmd

## Define the promt for multi line commands
PS2="  ${pPromtC}>>${pNormalC} "

## Clean up
unset prepareGit
