#!/bin/bash

## non-interactive shells shall not pass
case "$-$DOT_FAKE_DASH" in
	*i*)
	;;
	*)
		return
	;;
esac


## ==== Variable definitions ===================================================
## -- Actual shell ($SHELL is the login shell)
S_ACT_SHELL="$(ps -p $$ -o comm=)"

## -- hostname is not everywhere installed, therefore we need our own
S_FQDN="$(cat /proc/sys/kernel/hostname)"
S_HOST="$(cut -d. -f1 /proc/sys/kernel/hostname)"
S_DOMAIN="$(cut -d. -f2- /proc/sys/kernel/hostname)"

## -- test for login shell
case "$S_ACT_SHELL" in
	"bash")
		if shopt -q login_shell
		then S_LOGIN="y"
		else S_LOGIN="n"
		fi
		;;
	"zsh")
		if [[ -o login ]]
		then S_LOGIN="y"
		else S_LOGIN="n"
		fi
		
		if [ -f /etc/zsh/zprofile ] && [[ -o login ]] ; then . /etc/zsh/zprofile ; fi
		if [ -f /etc/zsh/zshrc ] ; then . /etc/zsh/zshrc ; fi
		if [ -f /etc/zsh/zlogin ] && [[ -o login ]] ; then . /etc/zsh/zlogin ; fi
		
		setopt NO_RCS
		setopt interactivecomments
		;;
	*)
		S_LOGIN="y"
		;;
esac


## ==== Once on all interactive shells (variables, umask) ======================
if [ -z "$DOT_DIR" ] ; then
	if [ -e /etc/profile ] ; then
		. /etc/profile
	fi
	
	if [ -f "$HOME/.dot/dir" ] ; then
		export DOT_DIR="$(cat "$HOME/.dot/dir")"
	else
		return
	fi
	
	for f in "$DOT_DIR/share/variables-sh_"* ; do
		. "$f"
	done
	
	case "$S_DOMAIN" in
		"fs.lmu.de"|*".fs.lmu.de")
			umask 0007
			;;
		"cip.ifi.lmu.de")
			umask 0077
			;;
		*)
			umask 0022
			;;
	esac
	
	if [ "$(tty || true)" = "/dev/ttyS0" ] ; then
		resize
	fi
fi


## ==== Every time on all interactive shells (aliases, functions) ==============
for f in \
	"$DOT_DIR/share/aliases_"* \
	"$DOT_DIR/share/promt-sh_"*
do
	. "$f"
done

vte_sh="$(find /etc/profile.d -name 'vte.sh' -o -name 'vte-*.sh' -print -quit)"
if [ -e "$vte_sh" ] ; then
	source "$vte_sh"
fi

## Allow Ctrl + S for vim
stty -ixon 2>/dev/null || true

case "$S_ACT_SHELL" in
	"bash")
		if type direnv >/dev/null 2>&1 ; then
			eval "$(direnv hook bash)"
		fi
		
		# check the window size after each command and, if necessary,
		# update the values of LINES and COLUMNS.
		shopt -s checkwinsize
		
		# Prevent that multiple bash instances overwrite the readline history of each
		# other.
		shopt -s histappend
		;;
	
	"zsh")
		if type direnv >/dev/null 2>&1 ; then
			eval "$(direnv hook zsh)"
		fi
		
		## khome = Home   kcuu1 = Up      kpp = Page Up
		## kend  = End    kcud1 = Down    knp = Page Down
		## kich1 = Ins    kcub1 = Left
		## kdch1 = Del    kcuf1 = Right
		
		## setup key accordingly
		## https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/key-bindings.zsh
		test -n "${terminfo[khome]}" && bindkey "${terminfo[khome]}"   beginning-of-line                     ## [Home] - Go to start of line
		test -n "${terminfo[kend]}"  && bindkey "${terminfo[kend]}"    end-of-line                           ## [End] - Go to end of line
		test -n "${terminfo[kich1]}" && bindkey "${terminfo[kich1]}"   overwrite-mode                        ## [Ins] - Insert/Overwrite mode
		test -n "${terminfo[kdch1]}" && bindkey "${terminfo[kdch1]}"   delete-char                           ## [Del] - Delete current character
		test -n "${terminfo[kcub1]}" && bindkey "${terminfo[kcub1]}"   backward-char                         ## [←] - Go to previous character
		test -n "${terminfo[kcuf1]}" && bindkey "${terminfo[kcuf1]}"   forward-char                          ## [→] - Go to next character
		test -n "${terminfo[kpp]}"   && bindkey "${terminfo[kpp]}"     beginning-of-buffer-or-history        ## [Pg Up] - 
		test -n "${terminfo[knp]}"   && bindkey "${terminfo[knp]}"     end-of-buffer-or-history              ## [Pg Dn] - 
		                                bindkey "^[[1;5C"              forward-word                          ## [Ctrl + →] - move forward one word
		                                bindkey "^[[1;5D"              backward-word                         ## [Ctrl + ←] - move backward one word
		test -n "${terminfo[kcuu1]}" && bindkey "${terminfo[kcuu1]}"   up_line_or_local_history              ## [↑] - 
		test -n "${terminfo[kcud1]}" && bindkey "${terminfo[kcud1]}"   down_line_or_local_history            ## [↓] - 
		                                bindkey "^[[1;5A"              up-line-or-history                    ## [Ctrl + ↑] - 
		                                bindkey "^[[1;5B"              down-line-or-history                  ## [Ctrl + ↓] - 
		                                bindkey "^X^H"                 run-help                              ## [ESC + h] - Manpage for current command (zsh: alias run-help man)
		                                bindkey "^[m"                  copy-prev-shell-word                  ## [Alt + m] - Copy previous word (usefull for mv/cp)
		test -n "${terminfo[kcbt]}"  && bindkey "${terminfo[kcbt]}"    reverse-menu-complete                 ## [Shift + Tab] - move through the completion menu backwards
		
		
		
		## Finally, make sure the terminal is in application mode, when zle is
		## active. Only then are the values from $terminfo valid.
		## /!\ Don't rename functions (http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html)
		if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )) ; then
			zle-line-init() {
				echo -n "${terminfo[smkx]}"
			}
			
			zle-line-finish() {
				echo -n "${terminfo[rmkx]}"
			}
			
			zle -N zle-line-init
			zle -N zle-line-finish
		fi
		
		
		up_line_or_local_history() {
			zle set-local-history 1
			zle up-line-or-history
			zle set-local-history 0
		}
		zle -N up_line_or_local_history
		
		down_line_or_local_history() {
			zle set-local-history 1
			zle down-line-or-history
			zle set-local-history 0
		}
		zle -N down_line_or_local_history
		
		
		setopt share_history
		setopt hist_ignore_all_dups
		setopt autocd
		setopt extendedglob
		setopt notify                 ## Immediate satus update of jobs
		
		autoload -U compinit
		compinit
		
		## Add a caption with the source of the suggestions
		zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
		zstyle ':completion:*:warnings'     format '%BSorry, no matches for: %d%b'
		
		## Color directory suggestions
		zstyle ':completion:*:default'      list-colors ${(s.:.)LS_COLORS}
		
		## Expand ..
		zstyle ':completion:*' special-dirs ..
		;;
esac


## ==== Every time on interactive login shells =================================
if [ "$S_LOGIN" = "y" ]
then
	## -- Start D-Bus ----------------------------------------------------------
	if \
		[ -n "$DISPLAY" ] && \
		type dbus-launch >/dev/null 2>&1
	then
		if [ -f "$HOME/.dbus-info" ] ; then
			source "$HOME/.dbus-info"
		fi
		
		if \
			! [ "$DBUS_SESSION_BUS_PID" -gt 0 ] 2>&1 || \
			! [ "$(basename "$(readlink "/proc/$DBUS_SESSION_BUS_PID/exe")")" = "dbus-daemon" ]
		then
			dbus-launch >"$HOME/.dbus-info"
			source "$HOME/.dbus-info"
		fi
		
		export DBUS_SESSION_BUS_ADDRESS
		export DBUS_SESSION_BUS_PID
		export DBUS_SESSION_BUS_WINDOWID
	fi
	
	## -- Start key agents -----------------------------------------------------
	## Keychain
	## (*) PAM support only with my pamkey script
	## (+) Prevent multiple instances
	## (+) ECDSA support
	if \
		type keychain >/dev/null 2>&1 && \
		eval "$(\
			keychain --query --agents ssh,gpg --quiet 2>/dev/null | \grep . | sed 's/^/export /' || \
			echo "return 1" \
		)"
	then
		## NOP
		true
	## Gnome keyring:
	## (-) No ECDSA
	## (*) Used by nm-applet and thunderbird
	## (+) Has out of the box PAM support
	elif type gnome-keyring-daemon >/dev/null 2>&1 && [ -n "$DISPLAY" ] ; then
		eval "$(gnome-keyring-daemon --start --components=pkcs11,secrets,ssh,gpg)"
		export GNOME_KEYRING_CONTROL
		export SSH_AUTH_SOCK
		export GPG_AGENT_INFO
	## PGP agent
	## (-) Pin entry shows up on "random" places, which makes it unusable in a
	##     multi session per user environment
	## (*) PAM support only with envoy
	## (-) Doesn't prevent multiple instances
	elif type gpg-agent >/dev/null 2>&1 && [ -n "$DISPLAY" ] ; then
		if [ -f "$HOME/.gpg-agent-info" ] ; then
			source "$HOME/.gpg-agent-info"
			
			if [ ! -O "$SSH_AUTH_SOCK" ] ; then
				unset SSH_AUTH_SOCK
			fi
		fi
		
		if [ -z "$SSH_AUTH_SOCK" ] ; then
			gpg-agent --daemon --enable-ssh-support >"$HOME/.gpg-agent-info"
			source "$HOME/.gpg-agent-info"
		fi
	## SSH agent
	## (+) ECDSA support
	## (-) PAM support only with pam_ssh, which doesn't load all keys
	##     (version 1) or desn't support ECDSA (Version 2)
	## (-) envoy's PAM doesn't load ssh keys at all
	## (-) Doesn't prevent multiple instances
	elif type ssh-agent >/dev/null 2>&1 ; then
		if [ -f "$HOME/.ssh-agent-info" ] ; then
			source "$HOME/.ssh-agent-info"
			
			if [ ! -O "$SSH_AUTH_SOCK" ] ; then
				unset SSH_AUTH_SOCK
			fi
		fi
		
		if [ -z "$SSH_AUTH_SOCK" ] ; then
			ssh-agent >"$HOME/.ssh-agent-info"
			source "$HOME/.ssh-agent-info"
		fi
	fi
## ==== Every time on interactive non-login shells =============================
else
	true
fi
